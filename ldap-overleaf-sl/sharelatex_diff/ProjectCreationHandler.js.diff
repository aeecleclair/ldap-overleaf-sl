4,11c4,5
< const { ObjectId } = require('mongodb')
< const Features = require('../../infrastructure/Features')
< const { Project } = require('../../models/Project')
< const { Folder } = require('../../models/Folder')
< const ProjectEntityUpdateHandler = require('./ProjectEntityUpdateHandler')
< const ProjectDetailsHandler = require('./ProjectDetailsHandler')
< const HistoryManager = require('../History/HistoryManager')
< const { User } = require('../../models/User')
---
> const logger = require('@overleaf/logger')
> 
12a7
> const fsExtra = require('fs-extra')
15c10,24
< const _ = require('lodash')
---
> const lodash = require('lodash')
> const { ObjectId } = require('mongodb-legacy')
> 
> const Features = require('../../infrastructure/Features')
> const { Doc } = require('../../models/Doc')
> const { Folder } = require('../../models/Folder')
> const { Project } = require('../../models/Project')
> const { User } = require('../../models/User')
> 
> const ProjectDeleter = require('./ProjectDeleter')
> const ProjectDetailsHandler = require('./ProjectDetailsHandler')
> const ProjectEntityMongoUpdateHandler = require('./ProjectEntityMongoUpdateHandler')
> const ProjectEntityUpdateHandler = require('./ProjectEntityUpdateHandler')
> const ProjectRootDocManager = require('./ProjectRootDocManager')
> 
17c26,30
< const TpdsUpdateSender = require('../ThirdPartyDataStore/TpdsUpdateSender')
---
> const DocstoreManager = require('../Docstore/DocstoreManager')
> const DocumentHelper = require('../Documents/DocumentHelper')
> const DocumentUpdaterHandler = require('../DocumentUpdater/DocumentUpdaterHandler')
> const FileStoreHandler = require('../FileStore/FileStoreHandler')
> const HistoryManager = require('../History/HistoryManager')
18a32,36
> const { InvalidZipFileError } = require('../Uploads/ArchiveErrors')
> const ArchiveManager = require('../Uploads/ArchiveManager')
> const FileSystemImportManager = require('../Uploads/FileSystemImportManager')
> const TpdsUpdateSender = require('../ThirdPartyDataStore/TpdsUpdateSender')
> const TpdsProjectFlusher = require('../ThirdPartyDataStore/TpdsProjectFlusher')
52c70
<   const segmentation = _.pick(attributes, [
---
>   const segmentation = lodash.pick(attributes, [
97,99c115,133
<   const project = await _createBlankProject(ownerId, projectName)
< 
<   await _addExampleProjectFiles(ownerId, projectName, project)
---
>   const template_path = "/var/lib/overleaf/template_ecl.zip"
>   const project = await _createProjectFromZipArchive(
>     ownerId,
>     projectName,
>     template_path,
>     function (error, project) {
>       if (error != null) {
>         logger.error(
>           { err: error, filePath: template_path, fileName: projectName },
>           'error uploading project'
>         )
>         if (error instanceof InvalidZipFileError) {
>           return console.warn(error.message)
>         } else {
>           return console.warn('upload_failed')
>         }
>       }
>     }
>   )
108,144d141
< async function _addExampleProjectFiles(ownerId, projectName, project) {
<   const mainDocLines = await _buildTemplate(
<     `${templateProjectDir}/main.tex`,
<     ownerId,
<     projectName
<   )
<   await _createRootDoc(project, ownerId, mainDocLines)
< 
<   const bibDocLines = await _buildTemplate(
<     `${templateProjectDir}/sample.bib`,
<     ownerId,
<     projectName
<   )
<   await ProjectEntityUpdateHandler.promises.addDoc(
<     project._id,
<     project.rootFolder[0]._id,
<     'sample.bib',
<     bibDocLines,
<     ownerId,
<     null
<   )
< 
<   const frogPath = path.join(
<     __dirname,
<     `/../../../templates/project_files/${templateProjectDir}/frog.jpg`
<   )
<   await ProjectEntityUpdateHandler.promises.addFile(
<     project._id,
<     project.rootFolder[0]._id,
<     'frog.jpg',
<     frogPath,
<     null,
<     ownerId,
<     null
<   )
< }
< 
240c237
<   const output = _.template(template.toString())(data)
---
>   const output = lodash.template(template.toString())(data)
255a253,400
> 
> 
> async function _createProjectFromZipArchive(ownerId, defaultName, zipPath) {
>   const contentsPath = await _extractZip(zipPath)
>   const { path, content } =
>     await ProjectRootDocManager.promises.findRootDocFileFromDirectory(
>       contentsPath
>     )
> 
>   const projectName =
>     DocumentHelper.getTitleFromTexContent(content || '') || defaultName
>   const uniqueName = await _generateUniqueName(ownerId, projectName)
>   const project = await createBlankProject(
>     ownerId,
>     uniqueName
>   )
>   try {
>     await _initializeProjectWithZipContents(ownerId, project, contentsPath)
> 
>     if (path) {
>       await ProjectRootDocManager.promises.setRootDocFromName(project._id, path)
>     }
>   } catch (err) {
>     // no need to wait for the cleanup here
>     ProjectDeleter.promises
>       .deleteProject(project._id)
>       .catch(err =>
>         logger.error(
>           { err, projectId: project._id },
>           'there was an error cleaning up project after importing a zip failed'
>         )
>       )
>     throw err
>   }
>   await fsExtra.remove(contentsPath)
>   return project
> }
> 
> async function _extractZip(zipPath) {
>   const destination = path.join(
>     path.dirname(zipPath),
>     `${path.basename(zipPath, '.zip')}-${Date.now()}`
>   )
>   await ArchiveManager.promises.extractZipArchive(zipPath, destination)
>   return destination
> }
> 
> async function _generateUniqueName(ownerId, originalName) {
>   const fixedName = ProjectDetailsHandler.fixProjectName(originalName)
>   const uniqueName = await ProjectDetailsHandler.promises.generateUniqueName(
>     ownerId,
>     fixedName
>   )
>   return uniqueName
> }
> 
> async function _initializeProjectWithZipContents(
>   ownerId,
>   project,
>   contentsPath
> ) {
>   const topLevelDir =
>     await ArchiveManager.promises.findTopLevelDirectory(contentsPath)
>   const importEntries =
>     await FileSystemImportManager.promises.importDir(topLevelDir)
>   const { fileEntries, docEntries } = await _createEntriesFromImports(
>     project._id,
>     importEntries
>   )
>   const projectVersion =
>     await ProjectEntityMongoUpdateHandler.promises.createNewFolderStructure(
>       project._id,
>       docEntries,
>       fileEntries
>     )
>   await _notifyDocumentUpdater(project, ownerId, {
>     newFiles: fileEntries,
>     newDocs: docEntries,
>     newProject: { version: projectVersion },
>   })
>   await TpdsProjectFlusher.promises.flushProjectToTpds(project._id)
> }
> 
> async function _createEntriesFromImports(projectId, importEntries) {
>   const fileEntries = []
>   const docEntries = []
>   for (const importEntry of importEntries) {
>     switch (importEntry.type) {
>       case 'doc': {
>         const docEntry = await _createDoc(
>           projectId,
>           importEntry.projectPath,
>           importEntry.lines
>         )
>         docEntries.push(docEntry)
>         break
>       }
>       case 'file': {
>         const fileEntry = await _createFile(
>           projectId,
>           importEntry.projectPath,
>           importEntry.fsPath
>         )
>         fileEntries.push(fileEntry)
>         break
>       }
>       default: {
>         throw new Error(`Invalid import type: ${importEntry.type}`)
>       }
>     }
>   }
>   return { fileEntries, docEntries }
> }
> 
> async function _createDoc(projectId, projectPath, docLines) {
>   const docName = path.basename(projectPath)
>   const doc = new Doc({ name: docName })
>   await DocstoreManager.promises.updateDoc(
>     projectId.toString(),
>     doc._id.toString(),
>     docLines,
>     0,
>     {}
>   )
>   return { doc, path: projectPath, docLines: docLines.join('\n') }
> }
> 
> async function _createFile(projectId, projectPath, fsPath) {
>   const fileName = path.basename(projectPath)
>   const { fileRef, url } = await FileStoreHandler.promises.uploadFileFromDisk(
>     projectId,
>     { name: fileName },
>     fsPath
>   )
>   return { file: fileRef, path: projectPath, url }
> }
> 
> async function _notifyDocumentUpdater(project, userId, changes) {
>   const projectHistoryId =
>     project.overleaf && project.overleaf.history && project.overleaf.history.id
>   await DocumentUpdaterHandler.promises.updateProjectStructure(
>     project._id,
>     projectHistoryId,
>     userId,
>     changes,
>     null
>   )
> }
\ No newline at end of file
